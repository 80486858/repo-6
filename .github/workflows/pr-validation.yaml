name: PR Validation

on: pull_request

env:
  NAME: "grafana-operator"

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: "v1.40.1"
          only-new-issues: true

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
      - name: Run fmt
        run: |
          make fmt
      - name: Check if working tree is dirty
        run: |
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo 'run make fmt and commit changes'
            exit 1
          fi

  manifests:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
      - name: Run manifests
        run: |
          make manifests
      - name: Check if working tree is dirty
        run: |
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo 'run make manifests and commit changes'
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.3.4
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
      - name: Run test
        run: |
          make test

  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo and checkout submodules
        uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16"
      - name: Prepare
        id: prep
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=VERSION::${VERSION}
          echo ::set-output name=BUILDARCH::$(go env GOARCH)
      - uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile
      - name: Cache container layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.3.0
      - name: Build and load (multi-arch)
        run: |
          make -j2 docker-build-multi IMG=${{ env.NAME }}:${{ steps.prep.outputs.VERSION }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}-${{ steps.prep.outputs.BUILDARCH }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
