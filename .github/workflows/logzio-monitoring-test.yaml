env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  eks-e2e-test:
    name: EKS e2e Test
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      id: random_id
      name: Generate random id
      run: echo "rand=$(echo $RANDOM)" >> $GITHUB_ENV
    - continue-on-error: true
      id: set_env_id
      name: Set ENV_ID
      run: 'echo "ENV_ID=monitoring-test-run-${{ env.rand }}-${{ matrix.environment
        }}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Checkout repository
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up credentials
      run: 'echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV

        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

        echo "AWS_REGION=us-east-1" >> $GITHUB_ENV

        echo "NUMBER_OF_NODES=3" >> $GITHUB_ENV

        echo "NODE_TYPE=m5.large" >> $GITHUB_ENV

        echo "KUBERNETES_ENV=${{ matrix.environment }}" >> $GITHUB_ENV

        echo "LOGZIO_LOGS_API_KEY=${{ secrets.LOGZIO_LOGS_API_KEY }}" >> $GITHUB_ENV

        echo "LOGZIO_METRICS_API_KEY=${{ secrets.LOGZIO_METRICS_API_KEY }}" >> $GITHUB_ENV

        echo "LOGZIO_TRACES_API_KEY=${{ secrets.LOGZIO_TRACES_API_KEY }}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Set up eksctl
      run: 'ARCH=amd64

        PLATFORM=$(uname -s)_$ARCH

        curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"

        tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz

        sudo mv /tmp/eksctl /usr/local/bin

        '
    - continue-on-error: true
      name: Provision Cluster
      run: "if [ \"${{ matrix.environment }}\" == \"eks-linux\" ]; then\n  eksctl\
        \ create cluster --name ${{ env.ENV_ID }}-${{ matrix.environment }} --region\
        \ ${{ env.AWS_REGION }} \\\n    --version ${{ matrix.kubernetes_version }}\
        \ --nodes ${{ env.NUMBER_OF_NODES }} \\\n    --node-type ${{ env.NODE_TYPE\
        \ }} --with-oidc\nelif [ \"${{ matrix.environment }}\" == \"eks-fargate\"\
        \ ]; then\n  eksctl create cluster --name ${{ env.ENV_ID }}-${{ matrix.environment\
        \ }} --region ${{ env.AWS_REGION }} \\\n    --version ${{ matrix.kubernetes_version\
        \ }} --fargate\nfi\n"
    - continue-on-error: true
      name: Update kubeconfig
      run: 'aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.ENV_ID
        }}-${{ matrix.environment }}

        '
    - continue-on-error: true
      if: matrix.environment == 'eks-linux'
      name: Label Nodes
      run: 'kubectl get nodes -o name | xargs -I {} kubectl label {} node-role.kubernetes.io/worker=worker
        --overwrite

        '
    - continue-on-error: true
      name: Deploy Helm Chart
      run: "cd charts/logzio-monitoring\nhelm dependency build\nHELM_CMD=\"helm upgrade\
        \ --install \\\n--set logs.enabled=true \\\n--set logzio-logs-collector.enabled=true\
        \ \\\n--set logzio-logs-collector.secrets.logzioLogsToken='${{ secrets.LOGZIO_LOGS_TOKEN\
        \ }}' \\\n--set logzio-logs-collector.secrets.logzioRegion='us' \\\n--set\
        \ logzio-logs-collector.secrets.env_id='${{ env.ENV_ID }}' \\\n--set logzio-logs-collector.secrets.logType='${{\
        \ env.ENV_ID }}' \\\n--set metricsOrTraces.enabled=true \\\n--set logzio-k8s-telemetry.metrics.enabled=true\
        \ \\\n--set logzio-k8s-telemetry.secrets.MetricsToken='${{ secrets.LOGZIO_METRICS_TOKEN\
        \ }}' \\\n--set logzio-k8s-telemetry.secrets.ListenerHost='https://listener.logz.io:8053'\
        \ \\\n--set logzio-k8s-telemetry.secrets.p8s_logzio_name='${{ env.ENV_ID }}'\
        \ \\\n--set logzio-k8s-telemetry.traces.enabled=true \\\n--set logzio-k8s-telemetry.secrets.TracesToken='${{\
        \ secrets.LOGZIO_TRACES_TOKEN }}' \\\n--set logzio-k8s-telemetry.secrets.LogzioRegion='us'\
        \ \\\n--set logzio-k8s-telemetry.spm.enabled=true \\\n--set logzio-k8s-telemetry.secrets.env_id='${{\
        \ env.ENV_ID }}' \\\n--set logzio-k8s-telemetry.secrets.SpmToken='${{ secrets.LOGZIO_METRICS_TOKEN\
        \ }}' \\\n--set logzio-k8s-telemetry.serviceGraph.enabled=true\"\n\nif [ \"\
        ${{ matrix.environment }}\" == \"eks-fargate\" ]; then\n  HELM_CMD=\"$HELM_CMD\
        \ --set logzio-logs-collector.fargateLogRouter.enabled='true' --set logzio-k8s-telemetry.collector.mode=standalone\"\
        \nfi\n\nHELM_CMD=\"$HELM_CMD logzio-monitoring .\"\n\necho \"Running Helm\
        \ command: $HELM_CMD\"\neval $HELM_CMD\n"
    - continue-on-error: true
      name: Wait for pods to be ready
      run: "kubectl rollout status deployment/logzio-monitoring-otel-collector-standalone\
        \ --timeout=300s\nkubectl rollout status deployment/logzio-monitoring-otel-collector-spm\
        \ --timeout=300s   \nkubectl rollout status deployment/logzio-monitoring-kube-state-metrics\
        \ --timeout=300s\nif [ \"${{ matrix.environment }}\" == \"eks-linux\" ]; then\n\
        \  kubectl rollout status ds/logzio-monitoring-prometheus-node-exporter --timeout=300s\n\
        \  kubectl rollout status ds/logzio-monitoring-otel-collector-ds --timeout=300s\n\
        fi\n"
    - continue-on-error: true
      if: matrix.environment == 'eks-fargate'
      name: Check `aws-observability` namespace and configmap (fargate)
      run: "NAMESPACE=\"aws-observability\"\nCONFIGMAP=\"aws-logging\"\n\nif kubectl\
        \ get namespace $NAMESPACE; then\n  echo \"Namespace $NAMESPACE exists.\"\n\
        else\n  echo \"Namespace $NAMESPACE does not exist.\"\n  exit 1\nfi\n\n# Check\
        \ if the configmap exists in the namespace\nif kubectl get configmap $CONFIGMAP\
        \ -n $NAMESPACE; then\n  echo \"ConfigMap $CONFIGMAP exists in namespace $NAMESPACE.\"\
        \nelse\n  echo \"ConfigMap $CONFIGMAP does not exist in namespace $NAMESPACE.\"\
        \n  exit 1\nfi\n"
    - continue-on-error: true
      name: Run log generator
      run: 'kubectl apply -f tests/resources/logsgen.yaml

        kubectl rollout status deployment/log-generator --timeout=300s

        '
    - continue-on-error: true
      name: Run trace generator
      run: 'kubectl apply -f tests/resources/tracegen-monitoring.yaml

        kubectl rollout status deployment/trace-gen --timeout=300s

        '
    - continue-on-error: true
      name: Sleep
      run: sleep 180
    - continue-on-error: true
      name: Get Logs
      run: "echo \"logzio-monitoring-otel-collector-standalone: \"\nkubectl logs deployment/logzio-monitoring-otel-collector-standalone\n\
        echo \"logzio-monitoring-otel-collector-spm: \"\nkubectl logs deployment/logzio-monitoring-otel-collector-spm\n\
        if [ \"${{ matrix.environment }}\" == \"eks-linux\" ]; then\n  echo \"logzio-monitoring-otel-collector-ds:\
        \ \"\n  kubectl logs ds/logzio-monitoring-otel-collector-ds\nfi\n"
    - continue-on-error: true
      id: logs_tests
      name: Run logs tests
      run: "go get go.uber.org/zap\nif [ \"${{ matrix.environment }}\" == \"eks-linux\"\
        \ ]; then\n  go test -v ./tests/logs_e2e_test.go ./tests/common.go\nelif [\
        \ \"${{ matrix.environment }}\" == \"eks-fargate\" ]; then\n  go test -v ./tests/fargate_logs_e2e_test.go\
        \ ./tests/common.go\nfi\n"
    - continue-on-error: true
      id: metrics_tests
      name: Run metrics tests
      run: "go get go.uber.org/zap\ngo test -v ./tests/metrics_e2e_test.go ./tests/common.go\
        \   \n"
    - continue-on-error: true
      id: traces_tests
      name: Run traces tests
      run: 'go get go.uber.org/zap

        go test -v ./tests/traces_e2e_test.go ./tests/common.go

        '
    - continue-on-error: true
      name: Check test results
      run: "if [ \"${{ steps.logs_tests.outcome }}\" == \"failure\" ] || \\\n   [\
        \ \"${{ steps.metrics_tests.outcome }}\" == \"failure\" ] || \\\n   [ \"${{\
        \ steps.traces_tests.outcome }}\" == \"failure\" ]; then\n  echo \"One or\
        \ more tests failed\"\n  exit 1\nfi\n"
    - continue-on-error: true
      if: always()
      name: Uninstall Helm Chart
      run: 'helm uninstall logzio-monitoring

        '
    - continue-on-error: true
      if: always()
      name: Delete Cluster
      run: 'eksctl delete cluster --name ${{ env.ENV_ID }}-${{ matrix.environment
        }} --region ${{ env.AWS_REGION }}

        '
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/logzio/logzio-helm.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        environment:
        - eks-linux
        - eks-fargate
        kubernetes_version:
        - '1.24'
        - '1.25'
        - '1.27'
        - '1.30'
    timeout-minutes: 60
name: Test `logzio-monitoring` chart
'on':
  workflow_dispatch: {}
